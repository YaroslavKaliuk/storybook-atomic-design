import{j as o}from"./jsx-runtime-D_zvdyIk.js";import{a as t}from"./enums-j1G55Avl.js";import{S as e}from"./snackbar-3enaQt1z.js";import"./index-xf0-QVxD.js";import"./_commonjsHelpers-CqkleIqs.js";import"./useTranslation-CO63FDpr.js";import"./nonIterableRest-DsePzpQ9.js";import"./index-BKyFwriW.js";const C={title:"Components/Atoms/Snackbar",component:e,parameters:{layout:"centered",docs:{description:{component:'<a href="https://www.figma.com/design/fj3YZUI95qph4XIR5twHJ6/Document-GPS---Design-System-(Copy)?node-id=738-36278&t=lHiDuq0CP77zBWjw-0" target="_blank"><b>Figma Design</b></a>'}}},tags:["autodocs"],argTypes:{color:{options:[t.primary,t.secondary,t.special],control:{type:"radio"},description:"Snackbar colors",table:{type:{summary:"UIColor"},defaultValue:{summary:t.primary}}},message:{control:{type:"text"},description:"Main message text",table:{type:{summary:"string"}}},buttonText:{control:{type:"text"},description:"Optional button text",table:{type:{summary:"string"}}},buttonOnClick:{description:"Callback when button is clicked",table:{type:{summary:"() => void"}}},classes:{control:{type:"object"},description:"Classes to apply to the snackbar",table:{type:{summary:"String: {root, message, button}"}}}},args:{color:t.primary,message:"Information message",buttonText:"Got it",buttonOnClick:()=>{},classes:{}},decorators:[p=>o.jsx(p,{})]},r={},a={render:()=>o.jsxs("div",{style:{display:"grid",gap:"1rem"},children:[o.jsx(e,{color:t.primary,message:"Information message",buttonText:"Got it",buttonOnClick:()=>{}}),o.jsx(e,{color:t.secondary,message:"Successful action confirmed",buttonText:"Got it",buttonOnClick:()=>{}}),o.jsx(e,{color:t.special,message:"Error message",buttonText:"Try again",buttonOnClick:()=>{}}),o.jsx(e,{color:t.primary,message:"Information message without action button",buttonText:""})]})};var s,n,i;r.parameters={...r.parameters,docs:{...(s=r.parameters)==null?void 0:s.docs,source:{originalSource:"{}",...(i=(n=r.parameters)==null?void 0:n.docs)==null?void 0:i.source}}};var c,m,l;a.parameters={...a.parameters,docs:{...(c=a.parameters)==null?void 0:c.docs,source:{originalSource:`{
  render: () => <div style={{
    display: 'grid',
    gap: '1rem'
  }}>
      <Snackbar color={UIColor.primary} message="Information message" buttonText="Got it" buttonOnClick={() => {}} />
      <Snackbar color={UIColor.secondary} message="Successful action confirmed" buttonText="Got it" buttonOnClick={() => {}} />
      <Snackbar color={UIColor.special} message="Error message" buttonText="Try again" buttonOnClick={() => {}} />
      <Snackbar color={UIColor.primary} message="Information message without action button" buttonText="" />
    </div>
}`,...(l=(m=a.parameters)==null?void 0:m.docs)==null?void 0:l.source}}};const S=["Default","AllVariants"];export{a as AllVariants,r as Default,S as __namedExportsOrder,C as default};
